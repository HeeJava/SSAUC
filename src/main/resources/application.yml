spring:
  application:
    name: ssauc

  web:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
    resources:
      cache:
        cachecontrol:
          no-store: true

  datasource:
    url: ${DB_URL}                      # 예: jdbc:mysql://host:3306/ssauc?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME}           # 예: root
    password: ${DB_PASSWORD}           # 예: 12341234
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: WinnerHikariPool
      minimum-idle: 5
      maximum-pool-size: 10
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
      properties:
        hibernate:
          use_sql_comments: true
          format_sql: true
          generate_statistics: true
          dialect: org.hibernate.dialect.MySQLDialect
    defer-datasource-initialization: true
    show-sql: true
  sql:
    init:
      mode: always

  # Elasticsearch
  elasticsearch:
    rest:
      uris: ${ES_URIS}               # 예: http://13.124.206.209:9200
      username: ${ES_USERNAME}       # 예: elastic
      password: ${ES_PASSWORD}       # 예: -PoYyP0VsLDZwu_efG0e
    ssl:
      enabled: false
      verification-mode: none

  data:
    elasticsearch:
      uris: ${ES_URIS}
      index-auto-creation: true
      connection-timeout: 5000
      read-timeout: 10000
    redis:
      host: ${REDIS_HOST}         # 13.124.206.209
      port: ${REDIS_PORT}         # 6380
      password: ${REDIS_PASSWORD}
      database: 0

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: email,profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: ${OAUTH_REDIRECT_NAVER}
            scope: name,email
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: ${OAUTH_REDIRECT_KAKAO}
            scope: profile_nickname,account_email
            client-name: Kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
    user:
      name: user
      password: password

  devtools:
    livereload:
      enabled: false
    restart:
      enabled: true

logging:
  level:
    root: INFO
    com.example.demo: DEBUG
    org.springframework.web: DEBUG
    org.thymeleaf: INFO
    org.springframework.boot.web.servlet: ERROR
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.hibernate.stat: DEBUG
  file:
    name: logs/app.log
    path: logs
  pattern:
    console: '%logger{36} - %msg%n'
    file: '%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n'

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    jmx:
      exposure:
        include: '*'

server:
  port: 5000

# file upload
upload:
  path: "C:/Users/A/ssauc/ssauc/src/main/resources/static/upload"

# AWS S3
aws:
  s3:
    bucket: ${AWS_S3_BUCKET}
    region: ${AWS_S3_REGION}
    accessKey: ${AWS_S3_ACCESS_KEY}
    secretKey: ${AWS_S3_SECRET_KEY}

# portone
portone:
  secret:
    api: ${PORTONE_SECRET}

# 스마트택배 api key
smarttracker:
  apiKey: ${SMARTTRACKER_API_KEY}

# chatgpt
openai:
  api:
    key: ${OPENAI_API_KEY}

firebase:
  credentials:
    path: classpath:firebase-service-account.json

jwt:
  secret:
    access: ${JWT_SECRET_ACCESS}
    refresh: ${JWT_SECRET_REFRESH}
  expire:
    access: 1800000
    refresh: 1209600000
